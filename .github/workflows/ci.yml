name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  REGISTRY: docker.io
  IMAGE_NAME_FRONTEND: adoom2018/read-it-later-frontend
  IMAGE_NAME_BACKEND: adoom2018/read-it-later-backend

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint || echo "No lint script found"

    - name: Run tests
      run: npm test -- --coverage --watchAll=false || echo "No tests found"

    - name: Build frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist

  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Build backend
      run: go build -v ./...

  docker-build-test:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend image (test)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: ${{ env.IMAGE_NAME_FRONTEND }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build backend image (test)
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: ${{ env.IMAGE_NAME_BACKEND }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test docker-compose
      run: |
        # 创建测试用的 docker-compose 文件
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          backend:
            image: ${{ env.IMAGE_NAME_BACKEND }}:test
            ports:
              - "8080:8080"
            environment:
              - GIN_MODE=release
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
              interval: 10s
              timeout: 5s
              retries: 3
              start_period: 10s
          
          frontend:
            image: ${{ env.IMAGE_NAME_FRONTEND }}:test
            ports:
              - "80:80"
            depends_on:
              - backend
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
              interval: 10s
              timeout: 5s
              retries: 3
              start_period: 10s
        EOF

        # 启动服务进行测试
        docker-compose -f docker-compose.test.yml up -d
        
        # 等待服务启动
        sleep 30
        
        # 检查服务健康状态
        docker-compose -f docker-compose.test.yml ps
        
        # 测试后端健康检查
        curl -f http://localhost:8080/health || exit 1
        
        # 测试前端是否可访问
        curl -f http://localhost/ || exit 1
        
        # 清理
        docker-compose -f docker-compose.test.yml down

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Super-Linter
      uses: github/super-linter@v5
      env:
        DEFAULT_BRANCH: master
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_DOCKERFILE_HADOLINT: true
        VALIDATE_YAML: true
        VALIDATE_JSON: true
        VALIDATE_MARKDOWN: true
